import numpy as np

class LinearRegression:
    def __init__(self):
        self.weights = None
        self.bias = None
    
    def fit(self, X, y):
        # Add a column of ones to X for the bias term
        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)
        
        # Compute weights using the normal equation
        self.weights = np.linalg.inv(X.T @ X) @ X.T @ y
    
    def predict(self, X):
        # Add a column of ones to X for the bias term
        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)
        
        return X @ self.weights

class PolynomialRegression:
    def __init__(self, degree):
        self.degree = degree
        self.weights = None
    
    def fit(self, X, y):
        # Create the feature matrix for polynomial regression
        X_poly = np.column_stack([X ** i for i in range(1, self.degree + 1)])
        
        # Compute weights using the normal equation
        self.weights = np.linalg.inv(X_poly.T @ X_poly) @ X_poly.T @ y
    
    def predict(self, X):
        # Create the feature matrix for polynomial regression
        X_poly = np.column_stack([X ** i for i in range(1, self.degree + 1)])
        
        return X_poly @ self.weights
