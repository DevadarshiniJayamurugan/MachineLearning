import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size)
        self.bias_hidden = np.random.rand(1, self.hidden_size)
        self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size)
        self.bias_output = np.random.rand(1, self.output_size)
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward_propagation(self, X):
        # Hidden layer
        self.hidden_activation = self.sigmoid(np.dot(X, self.weights_input_hidden) + self.bias_hidden)
        
        # Output layer
        self.output_activation = self.sigmoid(np.dot(self.hidden_activation, self.weights_hidden_output) + self.bias_output)
        
        return self.output_activation
    
    def backward_propagation(self, X, y, learning_rate):
        # Output layer
        output_error = y - self.output_activation
        output_delta = output_error * self.sigmoid_derivative(self.output_activation)
        
        # Hidden layer
        hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_activation)
        
        # Update weights and biases
        self.weights_hidden_output += np.dot(self.hidden_activation.T, output_delta) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += np.dot(X.T, hidden_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate
        
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            # Forward propagation
            output = self.forward_propagation(X)
            
            # Backward propagation
            self.backward_propagation(X, y, learning_rate)
            
            # Print the loss (MSE)
            loss = np.mean(np.square(y - output))
            if epoch % 1000 == 0:
                print(f'Epoch {epoch}, Loss: {loss}')
        
    def predict(self, X):
        return self.forward_propagation(X)

# Sample dataset
X_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_train = np.array([[0], [1], [1], [0]])

# Initialize and train the neural network
input_size = 2
hidden_size = 4
output_size = 1
epochs = 10000
learning_rate = 0.1

nn = NeuralNetwork(input_size, hidden_size, output_size)
nn.train(X_train, y_train, epochs, learning_rate)

# Test the trained neural network
X_test = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
predictions = nn.predict(X_test)

print("\nTest Predictions:")
print(predictions)
